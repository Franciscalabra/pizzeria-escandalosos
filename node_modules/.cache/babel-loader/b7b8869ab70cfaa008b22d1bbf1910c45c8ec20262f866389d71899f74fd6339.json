{"ast":null,"code":"// src/services/woocommerceApi.js\nimport { getApiUrl, getAuthHeaders } from '../config/woocommerce';\nclass WooCommerceAPI {\n  // Método genérico para hacer peticiones\n  async request(endpoint, method = 'GET', data = null) {\n    try {\n      const url = getApiUrl(endpoint);\n      const options = {\n        method,\n        headers: getAuthHeaders()\n      };\n      if (data && method !== 'GET') {\n        options.body = JSON.stringify(data);\n      }\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error en la petición a WooCommerce:', error);\n      throw error;\n    }\n  }\n\n  // === PRODUCTOS ===\n\n  // Obtener todos los productos\n  async getProducts(params = {}) {\n    const queryParams = new URLSearchParams({\n      per_page: 100,\n      ...params\n    }).toString();\n    return this.request(`products?${queryParams}`);\n  }\n\n  // Obtener un producto por ID\n  async getProduct(id) {\n    return this.request(`products/${id}`);\n  }\n\n  // Obtener categorías de productos\n  async getCategories() {\n    return this.request('products/categories?per_page=100');\n  }\n\n  // === PEDIDOS ===\n\n  // Crear un nuevo pedido\n  async createOrder(orderData) {\n    const order = {\n      payment_method: orderData.paymentMethod || 'cash',\n      payment_method_title: orderData.paymentMethodTitle || 'Pago en efectivo',\n      set_paid: false,\n      billing: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        city: orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL',\n        email: orderData.email || '',\n        phone: orderData.phone || ''\n      },\n      shipping: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        city: orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL'\n      },\n      line_items: orderData.items.map(item => ({\n        product_id: item.productId,\n        quantity: item.quantity,\n        meta_data: item.customizations || []\n      })),\n      shipping_lines: orderData.shipping ? [{\n        method_id: 'flat_rate',\n        method_title: 'Delivery',\n        total: orderData.shipping.toString()\n      }] : []\n    };\n    return this.request('orders', 'POST', order);\n  }\n\n  // Obtener pedidos\n  async getOrders(params = {}) {\n    const queryParams = new URLSearchParams({\n      per_page: 20,\n      ...params\n    }).toString();\n    return this.request(`orders?${queryParams}`);\n  }\n\n  // Obtener un pedido por ID\n  async getOrder(id) {\n    return this.request(`orders/${id}`);\n  }\n\n  // Actualizar estado del pedido\n  async updateOrderStatus(orderId, status) {\n    return this.request(`orders/${orderId}`, 'PUT', {\n      status\n    });\n  }\n\n  // === CLIENTES ===\n\n  // Crear cliente\n  async createCustomer(customerData) {\n    const customer = {\n      email: customerData.email,\n      first_name: customerData.firstName,\n      last_name: customerData.lastName || '',\n      username: customerData.email,\n      billing: {\n        first_name: customerData.firstName,\n        last_name: customerData.lastName || '',\n        email: customerData.email,\n        phone: customerData.phone || '',\n        address_1: customerData.address || '',\n        city: customerData.city || 'Santiago',\n        country: 'CL'\n      }\n    };\n    return this.request('customers', 'POST', customer);\n  }\n\n  // Buscar cliente por email\n  async getCustomerByEmail(email) {\n    return this.request(`customers?email=${email}`);\n  }\n\n  // === MÉTODOS DE PAGO ===\n\n  // Obtener métodos de pago disponibles\n  async getPaymentMethods() {\n    return this.request('payment_gateways');\n  }\n\n  // === ZONAS DE ENVÍO ===\n\n  // Obtener zonas de envío\n  async getShippingZones() {\n    return this.request('shipping/zones');\n  }\n\n  // === CUPONES ===\n\n  // Validar cupón\n  async getCoupon(code) {\n    return this.request(`coupons?code=${code}`);\n  }\n}\n\n// Exportar instancia única\nexport default new WooCommerceAPI();","map":{"version":3,"names":["getApiUrl","getAuthHeaders","WooCommerceAPI","request","endpoint","method","data","url","options","headers","body","JSON","stringify","response","fetch","ok","Error","status","statusText","json","error","console","getProducts","params","queryParams","URLSearchParams","per_page","toString","getProduct","id","getCategories","createOrder","orderData","order","payment_method","paymentMethod","payment_method_title","paymentMethodTitle","set_paid","billing","first_name","customerName","last_name","address_1","address","city","state","postcode","country","email","phone","shipping","line_items","items","map","item","product_id","productId","quantity","meta_data","customizations","shipping_lines","method_id","method_title","total","getOrders","getOrder","updateOrderStatus","orderId","createCustomer","customerData","customer","firstName","lastName","username","getCustomerByEmail","getPaymentMethods","getShippingZones","getCoupon","code"],"sources":["/Users/franciscalabra/Desktop/pizzeria-escandalosos/src/services/woocommerceApi.js"],"sourcesContent":["// src/services/woocommerceApi.js\nimport { getApiUrl, getAuthHeaders } from '../config/woocommerce';\n\nclass WooCommerceAPI {\n  // Método genérico para hacer peticiones\n  async request(endpoint, method = 'GET', data = null) {\n    try {\n      const url = getApiUrl(endpoint);\n      const options = {\n        method,\n        headers: getAuthHeaders(),\n      };\n\n      if (data && method !== 'GET') {\n        options.body = JSON.stringify(data);\n      }\n\n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error en la petición a WooCommerce:', error);\n      throw error;\n    }\n  }\n\n  // === PRODUCTOS ===\n  \n  // Obtener todos los productos\n  async getProducts(params = {}) {\n    const queryParams = new URLSearchParams({\n      per_page: 100,\n      ...params\n    }).toString();\n    \n    return this.request(`products?${queryParams}`);\n  }\n\n  // Obtener un producto por ID\n  async getProduct(id) {\n    return this.request(`products/${id}`);\n  }\n\n  // Obtener categorías de productos\n  async getCategories() {\n    return this.request('products/categories?per_page=100');\n  }\n\n  // === PEDIDOS ===\n  \n  // Crear un nuevo pedido\n  async createOrder(orderData) {\n    const order = {\n      payment_method: orderData.paymentMethod || 'cash',\n      payment_method_title: orderData.paymentMethodTitle || 'Pago en efectivo',\n      set_paid: false,\n      billing: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        city: orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL',\n        email: orderData.email || '',\n        phone: orderData.phone || ''\n      },\n      shipping: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        city: orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL'\n      },\n      line_items: orderData.items.map(item => ({\n        product_id: item.productId,\n        quantity: item.quantity,\n        meta_data: item.customizations || []\n      })),\n      shipping_lines: orderData.shipping ? [{\n        method_id: 'flat_rate',\n        method_title: 'Delivery',\n        total: orderData.shipping.toString()\n      }] : []\n    };\n\n    return this.request('orders', 'POST', order);\n  }\n\n  // Obtener pedidos\n  async getOrders(params = {}) {\n    const queryParams = new URLSearchParams({\n      per_page: 20,\n      ...params\n    }).toString();\n    \n    return this.request(`orders?${queryParams}`);\n  }\n\n  // Obtener un pedido por ID\n  async getOrder(id) {\n    return this.request(`orders/${id}`);\n  }\n\n  // Actualizar estado del pedido\n  async updateOrderStatus(orderId, status) {\n    return this.request(`orders/${orderId}`, 'PUT', { status });\n  }\n\n  // === CLIENTES ===\n  \n  // Crear cliente\n  async createCustomer(customerData) {\n    const customer = {\n      email: customerData.email,\n      first_name: customerData.firstName,\n      last_name: customerData.lastName || '',\n      username: customerData.email,\n      billing: {\n        first_name: customerData.firstName,\n        last_name: customerData.lastName || '',\n        email: customerData.email,\n        phone: customerData.phone || '',\n        address_1: customerData.address || '',\n        city: customerData.city || 'Santiago',\n        country: 'CL'\n      }\n    };\n\n    return this.request('customers', 'POST', customer);\n  }\n\n  // Buscar cliente por email\n  async getCustomerByEmail(email) {\n    return this.request(`customers?email=${email}`);\n  }\n\n  // === MÉTODOS DE PAGO ===\n  \n  // Obtener métodos de pago disponibles\n  async getPaymentMethods() {\n    return this.request('payment_gateways');\n  }\n\n  // === ZONAS DE ENVÍO ===\n  \n  // Obtener zonas de envío\n  async getShippingZones() {\n    return this.request('shipping/zones');\n  }\n\n  // === CUPONES ===\n  \n  // Validar cupón\n  async getCoupon(code) {\n    return this.request(`coupons?code=${code}`);\n  }\n}\n\n// Exportar instancia única\nexport default new WooCommerceAPI();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}