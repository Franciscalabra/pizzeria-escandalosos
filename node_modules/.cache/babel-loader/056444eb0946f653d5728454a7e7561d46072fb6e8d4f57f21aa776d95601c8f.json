{"ast":null,"code":"// src/services/woocommerceApi.js\nimport { getApiUrl, getAuthHeaders } from '../config/woocommerce';\nclass WooCommerceAPI {\n  constructor() {\n    // Cache para configuraciones\n    this.cache = {\n      shippingZones: null,\n      paymentGateways: null,\n      storeSettings: null,\n      shippingMethods: null\n    };\n  }\n\n  // Método genérico para hacer peticiones\n  async request(endpoint, method = 'GET', data = null) {\n    try {\n      const url = getApiUrl(endpoint);\n      const options = {\n        method,\n        headers: getAuthHeaders()\n      };\n      if (data && method !== 'GET') {\n        options.body = JSON.stringify(data);\n      }\n      console.log('Request URL:', url);\n      console.log('Request options:', options);\n      const response = await fetch(url, options);\n\n      // Intentar obtener el cuerpo de la respuesta\n      const responseText = await response.text();\n      let responseData;\n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        responseData = responseText;\n      }\n      if (!response.ok) {\n        console.error('Error response:', responseData);\n        throw new Error(`Error ${response.status}: ${responseData.message || responseData.code || response.statusText}`);\n      }\n      return responseData;\n    } catch (error) {\n      console.error('Error en la petición a WooCommerce:', error);\n      throw error;\n    }\n  }\n\n  // === PRODUCTOS ===\n\n  // Obtener todos los productos\n  async getProducts(params = {}) {\n    const queryParams = new URLSearchParams({\n      per_page: 100,\n      ...params\n    }).toString();\n    return this.request(`products?${queryParams}`);\n  }\n\n  // Obtener un producto por ID\n  async getProduct(id) {\n    return this.request(`products/${id}`);\n  }\n\n  // Obtener variaciones de un producto\n  async getProductVariations(productId) {\n    return this.request(`products/${productId}/variations?per_page=100`);\n  }\n\n  // Obtener atributos de productos\n  async getProductAttributes() {\n    return this.request('products/attributes');\n  }\n\n  // Obtener términos de un atributo\n  async getAttributeTerms(attributeId) {\n    return this.request(`products/attributes/${attributeId}/terms`);\n  }\n\n  // Obtener categorías de productos\n  async getCategories() {\n    return this.request('products/categories?per_page=100');\n  }\n\n  // === CONFIGURACIONES DE LA TIENDA ===\n\n  // Obtener información de la tienda\n  async getStoreInfo() {\n    if (this.cache.storeSettings) {\n      return this.cache.storeSettings;\n    }\n    try {\n      var _settings$find, _settings$find2, _settings$find3, _settings$find4, _settings$find5, _settings$find6, _settings$find7, _settings$find8;\n      // Intentar obtener configuraciones generales\n      const settings = await this.request('settings/general');\n      const storeInfo = {\n        name: ((_settings$find = settings.find(s => s.id === 'blogname')) === null || _settings$find === void 0 ? void 0 : _settings$find.value) || 'Escandalosos Pizza',\n        description: ((_settings$find2 = settings.find(s => s.id === 'blogdescription')) === null || _settings$find2 === void 0 ? void 0 : _settings$find2.value) || 'Dark kitchen Isla de Maipo',\n        address: ((_settings$find3 = settings.find(s => s.id === 'woocommerce_store_address')) === null || _settings$find3 === void 0 ? void 0 : _settings$find3.value) || 'Camino las parcelas 12',\n        address2: ((_settings$find4 = settings.find(s => s.id === 'woocommerce_store_address_2')) === null || _settings$find4 === void 0 ? void 0 : _settings$find4.value) || '',\n        city: ((_settings$find5 = settings.find(s => s.id === 'woocommerce_store_city')) === null || _settings$find5 === void 0 ? void 0 : _settings$find5.value) || 'Isla de Maipo',\n        postcode: ((_settings$find6 = settings.find(s => s.id === 'woocommerce_store_postcode')) === null || _settings$find6 === void 0 ? void 0 : _settings$find6.value) || '',\n        country: ((_settings$find7 = settings.find(s => s.id === 'woocommerce_default_country')) === null || _settings$find7 === void 0 ? void 0 : _settings$find7.value) || 'CL',\n        phone: '+56 942740261',\n        email: 'hola@escandalosospizza.cl',\n        currency: ((_settings$find8 = settings.find(s => s.id === 'woocommerce_currency')) === null || _settings$find8 === void 0 ? void 0 : _settings$find8.value) || 'CLP',\n        // Horarios\n        schedule: {\n          monday_thursday: {\n            open: '18:00',\n            close: '22:00',\n            label: 'Lunes a jueves'\n          },\n          friday: {\n            open: '18:00',\n            close: '23:00',\n            label: 'Viernes'\n          },\n          saturday: {\n            open: '13:00',\n            close: '23:00',\n            label: 'Sábado'\n          },\n          sunday: {\n            open: '13:00',\n            close: '22:00',\n            label: 'Domingo'\n          }\n        },\n        // Tiempos de entrega\n        deliveryTime: '30-45 minutos',\n        pickupTime: '20-30 minutos'\n      };\n      this.cache.storeSettings = storeInfo;\n      return storeInfo;\n    } catch (error) {\n      console.error('Error obteniendo información de la tienda:', error);\n      // Devolver valores por defecto\n      return this.getDefaultStoreInfo();\n    }\n  }\n\n  // === ENVÍO ===\n\n  // Obtener zonas y métodos de envío\n  async getShippingMethods() {\n    if (this.cache.shippingMethods) {\n      return this.cache.shippingMethods;\n    }\n    try {\n      const zones = await this.request('shipping/zones');\n\n      // Para cada zona, obtener sus métodos\n      const shippingData = await Promise.all(zones.map(async zone => {\n        try {\n          const methods = await this.request(`shipping/zones/${zone.id}/methods`);\n\n          // Filtrar y mapear métodos habilitados\n          const enabledMethods = methods.filter(m => m.enabled).map(method => {\n            var _method$settings, _method$settings$cost, _method$settings2, _method$settings2$min;\n            return {\n              id: method.id,\n              instanceId: method.instance_id,\n              title: method.title,\n              methodId: method.method_id,\n              methodTitle: method.method_title,\n              cost: ((_method$settings = method.settings) === null || _method$settings === void 0 ? void 0 : (_method$settings$cost = _method$settings.cost) === null || _method$settings$cost === void 0 ? void 0 : _method$settings$cost.value) || '0',\n              minAmount: ((_method$settings2 = method.settings) === null || _method$settings2 === void 0 ? void 0 : (_method$settings2$min = _method$settings2.min_amount) === null || _method$settings2$min === void 0 ? void 0 : _method$settings2$min.value) || '0',\n              enabled: method.enabled,\n              requiresAddress: method.method_id !== 'local_pickup'\n            };\n          });\n          return {\n            id: zone.id,\n            name: zone.name,\n            methods: enabledMethods\n          };\n        } catch (error) {\n          console.error(`Error obteniendo métodos para zona ${zone.id}:`, error);\n          return {\n            ...zone,\n            methods: []\n          };\n        }\n      }));\n\n      // Filtrar las zonas que no tienen métodos de envío habilitados\n      const zonesWithMethods = shippingData.filter(zone => zone.methods && zone.methods.length > 0);\n      this.cache.shippingMethods = zonesWithMethods;\n      return zonesWithMethods;\n    } catch (error) {\n      console.error('Error obteniendo métodos de envío:', error);\n      return this.getDefaultShippingMethods();\n    }\n  }\n\n  // Calcular costo de envío\n  calculateShippingCost(zones, subtotal, zoneId = null) {\n    // Si no hay zonas, devolver 0\n    if (!zones || zones.length === 0) return 0;\n\n    // Buscar la zona apropiada (por defecto la primera)\n    const zone = zoneId ? zones.find(z => z.id === zoneId) : zones[0];\n    if (!zone || !zone.methods || zone.methods.length === 0) return 0;\n\n    // Buscar método de envío (flat_rate o local_delivery)\n    const shippingMethod = zone.methods.find(m => m.methodId === 'flat_rate' || m.methodId === 'local_delivery');\n    if (!shippingMethod) return 0;\n    const cost = parseFloat(shippingMethod.cost) || 0;\n    const minAmount = parseFloat(shippingMethod.minAmount) || 0;\n\n    // Si hay monto mínimo para envío gratis y se cumple\n    if (minAmount > 0 && subtotal >= minAmount) {\n      return 0;\n    }\n    return cost;\n  }\n\n  // === MÉTODOS DE PAGO ===\n\n  // Obtener métodos de pago disponibles\n  async getPaymentGateways() {\n    if (this.cache.paymentGateways) {\n      return this.cache.paymentGateways;\n    }\n    try {\n      const gateways = await this.request('payment_gateways');\n\n      // Mapear métodos de pago habilitados\n      const paymentMethods = gateways.filter(gateway => gateway.enabled === true).map(gateway => ({\n        id: gateway.id,\n        title: gateway.title,\n        description: gateway.description,\n        icon: this.getPaymentIcon(gateway.id),\n        order: gateway.order || 0,\n        settings: gateway.settings\n      })).sort((a, b) => a.order - b.order);\n      this.cache.paymentGateways = paymentMethods;\n      return paymentMethods;\n    } catch (error) {\n      console.error('Error obteniendo métodos de pago:', error);\n      return this.getDefaultPaymentMethods();\n    }\n  }\n\n  // Obtener icono para método de pago\n  getPaymentIcon(methodId) {\n    const icons = {\n      'cod': 'DollarSign',\n      // Contra entrega\n      'bacs': 'Building',\n      // Transferencia bancaria\n      'cheque': 'FileText',\n      // Cheque\n      'paypal': 'CreditCard',\n      // PayPal\n      'stripe': 'CreditCard',\n      // Stripe\n      'mercadopago': 'CreditCard',\n      // MercadoPago\n      'webpay': 'CreditCard',\n      // Webpay\n      'transbank': 'CreditCard',\n      // Transbank\n      'flow': 'CreditCard' // Flow\n    };\n    return icons[methodId] || 'CreditCard';\n  }\n\n  // === PEDIDOS ===\n\n  // Crear un nuevo pedido\n  async createOrder(orderData) {\n    const order = {\n      payment_method: orderData.paymentMethod || 'cod',\n      payment_method_title: orderData.paymentMethodTitle || 'Pago contra entrega',\n      set_paid: false,\n      status: 'pending',\n      customer_note: orderData.notes || '',\n      billing: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        address_2: orderData.reference || '',\n        city: orderData.neighborhood || orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL',\n        email: orderData.email || '',\n        phone: orderData.phone || ''\n      },\n      shipping: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        address_2: orderData.reference || '',\n        city: orderData.neighborhood || orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL'\n      },\n      line_items: orderData.items.map(item => {\n        const lineItem = {\n          product_id: parseInt(item.productId),\n          quantity: parseInt(item.quantity)\n        };\n\n        // Si tiene variación, agregar variation_id\n        if (item.variationId) {\n          lineItem.variation_id = parseInt(item.variationId);\n        }\n\n        // Si tiene meta data (personalizaciones)\n        if (item.customizations) {\n          var _item$customizations$;\n          lineItem.meta_data = [];\n\n          // Instrucciones especiales\n          if (item.customizations.specialInstructions) {\n            lineItem.meta_data.push({\n              key: 'instrucciones_especiales',\n              value: item.customizations.specialInstructions\n            });\n          }\n\n          // Campos de Advanced Product Fields\n          if (((_item$customizations$ = item.customizations.productAddons) === null || _item$customizations$ === void 0 ? void 0 : _item$customizations$.length) > 0) {\n            item.customizations.productAddons.forEach(addon => {\n              lineItem.meta_data.push({\n                key: addon.key,\n                value: addon.value,\n                display_key: addon.display || addon.key,\n                display_value: addon.value\n              });\n            });\n          }\n        }\n        return lineItem;\n      }),\n      shipping_lines: [],\n      fee_lines: [],\n      meta_data: []\n    };\n\n    // Agregar línea de envío si es delivery\n    if (orderData.orderType === 'delivery' && orderData.shippingMethod) {\n      var _orderData$shippingMe;\n      order.shipping_lines.push({\n        method_id: orderData.shippingMethod.methodId || 'flat_rate',\n        method_title: orderData.shippingMethod.title || 'Envío a domicilio',\n        total: ((_orderData$shippingMe = orderData.shippingMethod.cost) === null || _orderData$shippingMe === void 0 ? void 0 : _orderData$shippingMe.toString()) || '0'\n      });\n    }\n\n    // Agregar meta data adicional\n    order.meta_data.push({\n      key: '_order_type',\n      value: orderData.orderType || 'delivery'\n    });\n    if (orderData.paymentMethod === 'cod' && orderData.cashAmount) {\n      order.meta_data.push({\n        key: '_cash_amount',\n        value: orderData.cashAmount\n      });\n    }\n    return this.request('orders', 'POST', order);\n  }\n\n  // Obtener un pedido\n  async getOrder(orderId) {\n    return this.request(`orders/${orderId}`);\n  }\n\n  // Actualizar estado de un pedido\n  async updateOrderStatus(orderId, status) {\n    return this.request(`orders/${orderId}`, 'PUT', {\n      status\n    });\n  }\n\n  // === CLIENTES ===\n\n  // Crear cliente\n  async createCustomer(customerData) {\n    return this.request('customers', 'POST', customerData);\n  }\n\n  // Obtener cliente\n  async getCustomer(customerId) {\n    return this.request(`customers/${customerId}`);\n  }\n\n  // === MÉTODOS DE UTILIDAD ===\n\n  // Limpiar cache\n  clearCache() {\n    this.cache = {\n      shippingZones: null,\n      paymentGateways: null,\n      storeSettings: null,\n      shippingMethods: null\n    };\n  }\n\n  // === ZONAS DE ENVÍO ===\n\n  // Obtener zonas de envío disponibles para delivery\n  async getDeliveryZones() {\n    try {\n      // Intentar obtener desde un endpoint personalizado o configuración\n      const response = await fetch('https://escandalosospizzas.cl/wp/wp-json/wp/v2/settings/delivery_zones', {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const zones = await response.json();\n        return zones;\n      }\n    } catch (error) {\n      console.error('Error obteniendo zonas de delivery:', error);\n    }\n\n    // Si no hay configuración, devolver array vacío\n    // Las zonas deberían configurarse en WooCommerce\n    return [];\n  }\n\n  // === VALORES POR DEFECTO ===\n  // Estos valores solo se usan si la API falla completamente\n\n  getDefaultStoreInfo() {\n    console.warn('Usando información de tienda por defecto. Configure en WooCommerce.');\n    return {\n      name: 'Escandalosos Pizza',\n      description: 'Dark kitchen Isla de Maipo',\n      address: 'Camino las parcelas 12',\n      address2: '',\n      city: 'Isla de Maipo',\n      postcode: '',\n      country: 'CL',\n      phone: '+56 942740261',\n      email: 'hola@escandalosospizza.cl',\n      currency: 'CLP',\n      schedule: {\n        monday_thursday: {\n          open: '18:00',\n          close: '22:00',\n          label: 'Lunes a jueves'\n        },\n        friday: {\n          open: '18:00',\n          close: '23:00',\n          label: 'Viernes'\n        },\n        saturday: {\n          open: '13:00',\n          close: '23:00',\n          label: 'Sábado'\n        },\n        sunday: {\n          open: '13:00',\n          close: '22:00',\n          label: 'Domingo'\n        }\n      },\n      deliveryTime: '30-45 minutos',\n      pickupTime: '20-30 minutos'\n    };\n  }\n  getDefaultShippingMethods() {\n    console.warn('No se encontraron métodos de envío configurados en WooCommerce.');\n    // Devolver array vacío - los métodos deben configurarse en WooCommerce\n    return [];\n  }\n  getDefaultPaymentMethods() {\n    console.warn('No se encontraron métodos de pago configurados en WooCommerce.');\n    // Devolver array vacío - los métodos deben configurarse en WooCommerce\n    return [];\n  }\n}\nexport default new WooCommerceAPI();","map":{"version":3,"names":["getApiUrl","getAuthHeaders","WooCommerceAPI","constructor","cache","shippingZones","paymentGateways","storeSettings","shippingMethods","request","endpoint","method","data","url","options","headers","body","JSON","stringify","console","log","response","fetch","responseText","text","responseData","parse","e","ok","error","Error","status","message","code","statusText","getProducts","params","queryParams","URLSearchParams","per_page","toString","getProduct","id","getProductVariations","productId","getProductAttributes","getAttributeTerms","attributeId","getCategories","getStoreInfo","_settings$find","_settings$find2","_settings$find3","_settings$find4","_settings$find5","_settings$find6","_settings$find7","_settings$find8","settings","storeInfo","name","find","s","value","description","address","address2","city","postcode","country","phone","email","currency","schedule","monday_thursday","open","close","label","friday","saturday","sunday","deliveryTime","pickupTime","getDefaultStoreInfo","getShippingMethods","zones","shippingData","Promise","all","map","zone","methods","enabledMethods","filter","m","enabled","_method$settings","_method$settings$cost","_method$settings2","_method$settings2$min","instanceId","instance_id","title","methodId","method_id","methodTitle","method_title","cost","minAmount","min_amount","requiresAddress","zonesWithMethods","length","getDefaultShippingMethods","calculateShippingCost","subtotal","zoneId","z","shippingMethod","parseFloat","getPaymentGateways","gateways","paymentMethods","gateway","icon","getPaymentIcon","order","sort","a","b","getDefaultPaymentMethods","icons","createOrder","orderData","payment_method","paymentMethod","payment_method_title","paymentMethodTitle","set_paid","customer_note","notes","billing","first_name","customerName","last_name","address_1","address_2","reference","neighborhood","state","shipping","line_items","items","item","lineItem","product_id","parseInt","quantity","variationId","variation_id","customizations","_item$customizations$","meta_data","specialInstructions","push","key","productAddons","forEach","addon","display_key","display","display_value","shipping_lines","fee_lines","orderType","_orderData$shippingMe","total","cashAmount","getOrder","orderId","updateOrderStatus","createCustomer","customerData","getCustomer","customerId","clearCache","getDeliveryZones","json","warn"],"sources":["/Users/franciscalabra/Desktop/pizzeria-escandalosos/src/services/woocommerceApi.js"],"sourcesContent":["// src/services/woocommerceApi.js\nimport { getApiUrl, getAuthHeaders } from '../config/woocommerce';\n\nclass WooCommerceAPI {\n  constructor() {\n    // Cache para configuraciones\n    this.cache = {\n      shippingZones: null,\n      paymentGateways: null,\n      storeSettings: null,\n      shippingMethods: null\n    };\n  }\n\n  // Método genérico para hacer peticiones\n  async request(endpoint, method = 'GET', data = null) {\n    try {\n      const url = getApiUrl(endpoint);\n      const options = {\n        method,\n        headers: getAuthHeaders(),\n      };\n\n      if (data && method !== 'GET') {\n        options.body = JSON.stringify(data);\n      }\n\n      console.log('Request URL:', url);\n      console.log('Request options:', options);\n\n      const response = await fetch(url, options);\n      \n      // Intentar obtener el cuerpo de la respuesta\n      const responseText = await response.text();\n      let responseData;\n      \n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        responseData = responseText;\n      }\n\n      if (!response.ok) {\n        console.error('Error response:', responseData);\n        throw new Error(`Error ${response.status}: ${responseData.message || responseData.code || response.statusText}`);\n      }\n\n      return responseData;\n    } catch (error) {\n      console.error('Error en la petición a WooCommerce:', error);\n      throw error;\n    }\n  }\n\n  // === PRODUCTOS ===\n  \n  // Obtener todos los productos\n  async getProducts(params = {}) {\n    const queryParams = new URLSearchParams({\n      per_page: 100,\n      ...params\n    }).toString();\n    \n    return this.request(`products?${queryParams}`);\n  }\n\n  // Obtener un producto por ID\n  async getProduct(id) {\n    return this.request(`products/${id}`);\n  }\n\n  // Obtener variaciones de un producto\n  async getProductVariations(productId) {\n    return this.request(`products/${productId}/variations?per_page=100`);\n  }\n\n  // Obtener atributos de productos\n  async getProductAttributes() {\n    return this.request('products/attributes');\n  }\n\n  // Obtener términos de un atributo\n  async getAttributeTerms(attributeId) {\n    return this.request(`products/attributes/${attributeId}/terms`);\n  }\n\n  // Obtener categorías de productos\n  async getCategories() {\n    return this.request('products/categories?per_page=100');\n  }\n\n  // === CONFIGURACIONES DE LA TIENDA ===\n\n  // Obtener información de la tienda\n  async getStoreInfo() {\n    if (this.cache.storeSettings) {\n      return this.cache.storeSettings;\n    }\n\n    try {\n      // Intentar obtener configuraciones generales\n      const settings = await this.request('settings/general');\n      \n      const storeInfo = {\n        name: settings.find(s => s.id === 'blogname')?.value || 'Escandalosos Pizza',\n        description: settings.find(s => s.id === 'blogdescription')?.value || 'Dark kitchen Isla de Maipo',\n        address: settings.find(s => s.id === 'woocommerce_store_address')?.value || 'Camino las parcelas 12',\n        address2: settings.find(s => s.id === 'woocommerce_store_address_2')?.value || '',\n        city: settings.find(s => s.id === 'woocommerce_store_city')?.value || 'Isla de Maipo',\n        postcode: settings.find(s => s.id === 'woocommerce_store_postcode')?.value || '',\n        country: settings.find(s => s.id === 'woocommerce_default_country')?.value || 'CL',\n        phone: '+56 942740261',\n        email: 'hola@escandalosospizza.cl',\n        currency: settings.find(s => s.id === 'woocommerce_currency')?.value || 'CLP',\n        // Horarios\n        schedule: {\n          monday_thursday: { open: '18:00', close: '22:00', label: 'Lunes a jueves' },\n          friday: { open: '18:00', close: '23:00', label: 'Viernes' },\n          saturday: { open: '13:00', close: '23:00', label: 'Sábado' },\n          sunday: { open: '13:00', close: '22:00', label: 'Domingo' }\n        },\n        // Tiempos de entrega\n        deliveryTime: '30-45 minutos',\n        pickupTime: '20-30 minutos'\n      };\n      \n      this.cache.storeSettings = storeInfo;\n      return storeInfo;\n    } catch (error) {\n      console.error('Error obteniendo información de la tienda:', error);\n      // Devolver valores por defecto\n      return this.getDefaultStoreInfo();\n    }\n  }\n\n  // === ENVÍO ===\n\n  // Obtener zonas y métodos de envío\n  async getShippingMethods() {\n    if (this.cache.shippingMethods) {\n      return this.cache.shippingMethods;\n    }\n\n    try {\n      const zones = await this.request('shipping/zones');\n      \n      // Para cada zona, obtener sus métodos\n      const shippingData = await Promise.all(\n        zones.map(async (zone) => {\n          try {\n            const methods = await this.request(`shipping/zones/${zone.id}/methods`);\n            \n            // Filtrar y mapear métodos habilitados\n            const enabledMethods = methods\n              .filter(m => m.enabled)\n              .map(method => ({\n                id: method.id,\n                instanceId: method.instance_id,\n                title: method.title,\n                methodId: method.method_id,\n                methodTitle: method.method_title,\n                cost: method.settings?.cost?.value || '0',\n                minAmount: method.settings?.min_amount?.value || '0',\n                enabled: method.enabled,\n                requiresAddress: method.method_id !== 'local_pickup'\n              }));\n            \n            return {\n              id: zone.id,\n              name: zone.name,\n              methods: enabledMethods\n            };\n          } catch (error) {\n            console.error(`Error obteniendo métodos para zona ${zone.id}:`, error);\n            return { ...zone, methods: [] };\n          }\n        })\n      );\n      \n      // Filtrar las zonas que no tienen métodos de envío habilitados\n      const zonesWithMethods = shippingData.filter(zone => zone.methods && zone.methods.length > 0);\n      \n      this.cache.shippingMethods = zonesWithMethods;\n      return zonesWithMethods;\n    } catch (error) {\n      console.error('Error obteniendo métodos de envío:', error);\n      return this.getDefaultShippingMethods();\n    }\n  }\n\n  // Calcular costo de envío\n  calculateShippingCost(zones, subtotal, zoneId = null) {\n    // Si no hay zonas, devolver 0\n    if (!zones || zones.length === 0) return 0;\n    \n    // Buscar la zona apropiada (por defecto la primera)\n    const zone = zoneId ? zones.find(z => z.id === zoneId) : zones[0];\n    \n    if (!zone || !zone.methods || zone.methods.length === 0) return 0;\n    \n    // Buscar método de envío (flat_rate o local_delivery)\n    const shippingMethod = zone.methods.find(m => \n      m.methodId === 'flat_rate' || \n      m.methodId === 'local_delivery'\n    );\n    \n    if (!shippingMethod) return 0;\n    \n    const cost = parseFloat(shippingMethod.cost) || 0;\n    const minAmount = parseFloat(shippingMethod.minAmount) || 0;\n    \n    // Si hay monto mínimo para envío gratis y se cumple\n    if (minAmount > 0 && subtotal >= minAmount) {\n      return 0;\n    }\n    \n    return cost;\n  }\n\n  // === MÉTODOS DE PAGO ===\n\n  // Obtener métodos de pago disponibles\n  async getPaymentGateways() {\n    if (this.cache.paymentGateways) {\n      return this.cache.paymentGateways;\n    }\n\n    try {\n      const gateways = await this.request('payment_gateways');\n      \n      // Mapear métodos de pago habilitados\n      const paymentMethods = gateways\n        .filter(gateway => gateway.enabled === true)\n        .map(gateway => ({\n          id: gateway.id,\n          title: gateway.title,\n          description: gateway.description,\n          icon: this.getPaymentIcon(gateway.id),\n          order: gateway.order || 0,\n          settings: gateway.settings\n        }))\n        .sort((a, b) => a.order - b.order);\n      \n      this.cache.paymentGateways = paymentMethods;\n      return paymentMethods;\n    } catch (error) {\n      console.error('Error obteniendo métodos de pago:', error);\n      return this.getDefaultPaymentMethods();\n    }\n  }\n\n  // Obtener icono para método de pago\n  getPaymentIcon(methodId) {\n    const icons = {\n      'cod': 'DollarSign',           // Contra entrega\n      'bacs': 'Building',            // Transferencia bancaria\n      'cheque': 'FileText',          // Cheque\n      'paypal': 'CreditCard',        // PayPal\n      'stripe': 'CreditCard',        // Stripe\n      'mercadopago': 'CreditCard',   // MercadoPago\n      'webpay': 'CreditCard',        // Webpay\n      'transbank': 'CreditCard',     // Transbank\n      'flow': 'CreditCard'           // Flow\n    };\n    \n    return icons[methodId] || 'CreditCard';\n  }\n\n  // === PEDIDOS ===\n  \n  // Crear un nuevo pedido\n  async createOrder(orderData) {\n    const order = {\n      payment_method: orderData.paymentMethod || 'cod',\n      payment_method_title: orderData.paymentMethodTitle || 'Pago contra entrega',\n      set_paid: false,\n      status: 'pending',\n      customer_note: orderData.notes || '',\n      billing: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        address_2: orderData.reference || '',\n        city: orderData.neighborhood || orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL',\n        email: orderData.email || '',\n        phone: orderData.phone || ''\n      },\n      shipping: {\n        first_name: orderData.customerName,\n        last_name: '',\n        address_1: orderData.address || '',\n        address_2: orderData.reference || '',\n        city: orderData.neighborhood || orderData.city || 'Santiago',\n        state: '',\n        postcode: '',\n        country: 'CL'\n      },\n      line_items: orderData.items.map(item => {\n        const lineItem = {\n          product_id: parseInt(item.productId),\n          quantity: parseInt(item.quantity)\n        };\n\n        // Si tiene variación, agregar variation_id\n        if (item.variationId) {\n          lineItem.variation_id = parseInt(item.variationId);\n        }\n\n        // Si tiene meta data (personalizaciones)\n        if (item.customizations) {\n          lineItem.meta_data = [];\n          \n          // Instrucciones especiales\n          if (item.customizations.specialInstructions) {\n            lineItem.meta_data.push({\n              key: 'instrucciones_especiales',\n              value: item.customizations.specialInstructions\n            });\n          }\n\n          // Campos de Advanced Product Fields\n          if (item.customizations.productAddons?.length > 0) {\n            item.customizations.productAddons.forEach(addon => {\n              lineItem.meta_data.push({\n                key: addon.key,\n                value: addon.value,\n                display_key: addon.display || addon.key,\n                display_value: addon.value\n              });\n            });\n          }\n        }\n\n        return lineItem;\n      }),\n      shipping_lines: [],\n      fee_lines: [],\n      meta_data: []\n    };\n\n    // Agregar línea de envío si es delivery\n    if (orderData.orderType === 'delivery' && orderData.shippingMethod) {\n      order.shipping_lines.push({\n        method_id: orderData.shippingMethod.methodId || 'flat_rate',\n        method_title: orderData.shippingMethod.title || 'Envío a domicilio',\n        total: orderData.shippingMethod.cost?.toString() || '0'\n      });\n    }\n\n    // Agregar meta data adicional\n    order.meta_data.push({\n      key: '_order_type',\n      value: orderData.orderType || 'delivery'\n    });\n\n    if (orderData.paymentMethod === 'cod' && orderData.cashAmount) {\n      order.meta_data.push({\n        key: '_cash_amount',\n        value: orderData.cashAmount\n      });\n    }\n\n    return this.request('orders', 'POST', order);\n  }\n\n  // Obtener un pedido\n  async getOrder(orderId) {\n    return this.request(`orders/${orderId}`);\n  }\n\n  // Actualizar estado de un pedido\n  async updateOrderStatus(orderId, status) {\n    return this.request(`orders/${orderId}`, 'PUT', { status });\n  }\n\n  // === CLIENTES ===\n  \n  // Crear cliente\n  async createCustomer(customerData) {\n    return this.request('customers', 'POST', customerData);\n  }\n\n  // Obtener cliente\n  async getCustomer(customerId) {\n    return this.request(`customers/${customerId}`);\n  }\n\n  // === MÉTODOS DE UTILIDAD ===\n\n  // Limpiar cache\n  clearCache() {\n    this.cache = {\n      shippingZones: null,\n      paymentGateways: null,\n      storeSettings: null,\n      shippingMethods: null\n    };\n  }\n\n  // === ZONAS DE ENVÍO ===\n  \n  // Obtener zonas de envío disponibles para delivery\n  async getDeliveryZones() {\n    try {\n      // Intentar obtener desde un endpoint personalizado o configuración\n      const response = await fetch(\n        'https://escandalosospizzas.cl/wp/wp-json/wp/v2/settings/delivery_zones',\n        { headers: getAuthHeaders() }\n      );\n      \n      if (response.ok) {\n        const zones = await response.json();\n        return zones;\n      }\n    } catch (error) {\n      console.error('Error obteniendo zonas de delivery:', error);\n    }\n    \n    // Si no hay configuración, devolver array vacío\n    // Las zonas deberían configurarse en WooCommerce\n    return [];\n  }\n\n  // === VALORES POR DEFECTO ===\n  // Estos valores solo se usan si la API falla completamente\n\n  getDefaultStoreInfo() {\n    console.warn('Usando información de tienda por defecto. Configure en WooCommerce.');\n    return {\n      name: 'Escandalosos Pizza',\n      description: 'Dark kitchen Isla de Maipo',\n      address: 'Camino las parcelas 12',\n      address2: '',\n      city: 'Isla de Maipo',\n      postcode: '',\n      country: 'CL',\n      phone: '+56 942740261',\n      email: 'hola@escandalosospizza.cl',\n      currency: 'CLP',\n      schedule: {\n        monday_thursday: { open: '18:00', close: '22:00', label: 'Lunes a jueves' },\n        friday: { open: '18:00', close: '23:00', label: 'Viernes' },\n        saturday: { open: '13:00', close: '23:00', label: 'Sábado' },\n        sunday: { open: '13:00', close: '22:00', label: 'Domingo' }\n      },\n      deliveryTime: '30-45 minutos',\n      pickupTime: '20-30 minutos'\n    };\n  }\n\n  getDefaultShippingMethods() {\n    console.warn('No se encontraron métodos de envío configurados en WooCommerce.');\n    // Devolver array vacío - los métodos deben configurarse en WooCommerce\n    return [];\n  }\n\n  getDefaultPaymentMethods() {\n    console.warn('No se encontraron métodos de pago configurados en WooCommerce.');\n    // Devolver array vacío - los métodos deben configurarse en WooCommerce\n    return [];\n  }\n}\n\nexport default new WooCommerceAPI();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}