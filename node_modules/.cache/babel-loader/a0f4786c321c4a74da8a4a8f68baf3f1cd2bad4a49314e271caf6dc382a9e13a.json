{"ast":null,"code":"var _jsxFileName = \"/Users/franciscalabra/Desktop/pizzeria-escandalosos/src/context/CartContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/CartContext.jsx\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Inicializar carrito desde localStorage\n  const [cart, setCart] = useState(() => {\n    const savedCart = localStorage.getItem('pizza_cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  // Estado para notificaciones\n  const [notification, setNotification] = useState(null);\n\n  // Guardar carrito en localStorage cuando cambie\n  useEffect(() => {\n    localStorage.setItem('pizza_cart', JSON.stringify(cart));\n  }, [cart]);\n\n  // Función para mostrar notificaciones\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      message,\n      type\n    });\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  // Agregar al carrito\n  const addToCart = useCallback(item => {\n    setCart(prevCart => {\n      // Crear un ID único para el item basado en sus atributos\n      const itemId = item.id || `${item.productId}-${Date.now()}`;\n\n      // Para productos personalizables, siempre agregar como nuevo item\n      if (item.customizations && Object.keys(item.customizations).length > 0) {\n        const newItem = {\n          ...item,\n          id: itemId,\n          addedAt: new Date().toISOString()\n        };\n        showNotification(`${item.name} agregado al carrito`, 'success');\n        return [...prevCart, newItem];\n      }\n\n      // Para productos simples, buscar si ya existe\n      const existingItemIndex = prevCart.findIndex(cartItem => cartItem.productId === item.productId && (!cartItem.customizations || Object.keys(cartItem.customizations).length === 0));\n      if (existingItemIndex > -1) {\n        // Si existe, aumentar cantidad\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + (item.quantity || 1)\n        };\n        showNotification(`${item.name} actualizado en el carrito`, 'success');\n        return updatedCart;\n      }\n\n      // Si no existe, agregar nuevo\n      const newItem = {\n        ...item,\n        id: itemId,\n        quantity: item.quantity || 1,\n        addedAt: new Date().toISOString()\n      };\n      showNotification(`${item.name} agregado al carrito`, 'success');\n      return [...prevCart, newItem];\n    });\n  }, []);\n\n  // Remover del carrito\n  const removeFromCart = useCallback(itemId => {\n    setCart(prevCart => {\n      const item = prevCart.find(item => item.id === itemId);\n      if (item) {\n        showNotification(`${item.name} eliminado del carrito`, 'info');\n      }\n      return prevCart.filter(item => item.id !== itemId);\n    });\n  }, []);\n\n  // Actualizar cantidad\n  const updateQuantity = useCallback((itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    setCart(prevCart => prevCart.map(item => item.id === itemId ? {\n      ...item,\n      quantity: newQuantity\n    } : item));\n  }, [removeFromCart]);\n\n  // Limpiar carrito\n  const clearCart = useCallback(() => {\n    setCart([]);\n    showNotification('Carrito vaciado', 'info');\n  }, []);\n\n  // Obtener total del carrito\n  const getCartTotal = useCallback(() => {\n    return cart.reduce((total, item) => {\n      const itemPrice = parseFloat(item.price) || 0;\n      const itemQuantity = parseInt(item.quantity) || 1;\n      return total + itemPrice * itemQuantity;\n    }, 0);\n  }, [cart]);\n\n  // Obtener cantidad de items\n  const getItemCount = useCallback(() => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  }, [cart]);\n\n  // Obtener un item específico\n  const getCartItem = useCallback(itemId => {\n    return cart.find(item => item.id === itemId);\n  }, [cart]);\n\n  // Verificar si un producto está en el carrito\n  const isInCart = useCallback(productId => {\n    return cart.some(item => item.productId === productId);\n  }, [cart]);\n\n  // Obtener descripción de personalizaciones\n  const getCustomizationDescription = customizations => {\n    if (!customizations || Object.keys(customizations).length === 0) {\n      return '';\n    }\n    const parts = [];\n    if (customizations.attributes) {\n      Object.entries(customizations.attributes).forEach(([key, value]) => {\n        parts.push(`${key}: ${value}`);\n      });\n    }\n    if (customizations.specialInstructions) {\n      parts.push(`Nota: ${customizations.specialInstructions}`);\n    }\n    return parts.join(' | ');\n  };\n  const value = {\n    cart,\n    notification,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getItemCount,\n    getCartItem,\n    isInCart,\n    getCustomizationDescription\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: [children, notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `cart-notification ${notification.type}`,\n      children: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"3R2HVuoEPDGMGB+At6g0phZt5ns=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","savedCart","localStorage","getItem","JSON","parse","notification","setNotification","setItem","stringify","showNotification","message","type","setTimeout","addToCart","item","prevCart","itemId","id","productId","Date","now","customizations","Object","keys","length","newItem","addedAt","toISOString","name","existingItemIndex","findIndex","cartItem","updatedCart","quantity","removeFromCart","find","filter","updateQuantity","newQuantity","map","clearCart","getCartTotal","reduce","total","itemPrice","parseFloat","price","itemQuantity","parseInt","getItemCount","getCartItem","isInCart","some","getCustomizationDescription","parts","attributes","entries","forEach","key","value","push","specialInstructions","join","Provider","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/franciscalabra/Desktop/pizzeria-escandalosos/src/context/CartContext.jsx"],"sourcesContent":["// src/context/CartContext.jsx\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  // Inicializar carrito desde localStorage\n  const [cart, setCart] = useState(() => {\n    const savedCart = localStorage.getItem('pizza_cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  // Estado para notificaciones\n  const [notification, setNotification] = useState(null);\n\n  // Guardar carrito en localStorage cuando cambie\n  useEffect(() => {\n    localStorage.setItem('pizza_cart', JSON.stringify(cart));\n  }, [cart]);\n\n  // Función para mostrar notificaciones\n  const showNotification = (message, type = 'success') => {\n    setNotification({ message, type });\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  // Agregar al carrito\n  const addToCart = useCallback((item) => {\n    setCart(prevCart => {\n      // Crear un ID único para el item basado en sus atributos\n      const itemId = item.id || `${item.productId}-${Date.now()}`;\n      \n      // Para productos personalizables, siempre agregar como nuevo item\n      if (item.customizations && Object.keys(item.customizations).length > 0) {\n        const newItem = {\n          ...item,\n          id: itemId,\n          addedAt: new Date().toISOString()\n        };\n        showNotification(`${item.name} agregado al carrito`, 'success');\n        return [...prevCart, newItem];\n      }\n      \n      // Para productos simples, buscar si ya existe\n      const existingItemIndex = prevCart.findIndex(\n        cartItem => cartItem.productId === item.productId && \n                   (!cartItem.customizations || Object.keys(cartItem.customizations).length === 0)\n      );\n      \n      if (existingItemIndex > -1) {\n        // Si existe, aumentar cantidad\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + (item.quantity || 1)\n        };\n        showNotification(`${item.name} actualizado en el carrito`, 'success');\n        return updatedCart;\n      }\n      \n      // Si no existe, agregar nuevo\n      const newItem = {\n        ...item,\n        id: itemId,\n        quantity: item.quantity || 1,\n        addedAt: new Date().toISOString()\n      };\n      showNotification(`${item.name} agregado al carrito`, 'success');\n      return [...prevCart, newItem];\n    });\n  }, []);\n\n  // Remover del carrito\n  const removeFromCart = useCallback((itemId) => {\n    setCart(prevCart => {\n      const item = prevCart.find(item => item.id === itemId);\n      if (item) {\n        showNotification(`${item.name} eliminado del carrito`, 'info');\n      }\n      return prevCart.filter(item => item.id !== itemId);\n    });\n  }, []);\n\n  // Actualizar cantidad\n  const updateQuantity = useCallback((itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    \n    setCart(prevCart => \n      prevCart.map(item => \n        item.id === itemId \n          ? { ...item, quantity: newQuantity }\n          : item\n      )\n    );\n  }, [removeFromCart]);\n\n  // Limpiar carrito\n  const clearCart = useCallback(() => {\n    setCart([]);\n    showNotification('Carrito vaciado', 'info');\n  }, []);\n\n  // Obtener total del carrito\n  const getCartTotal = useCallback(() => {\n    return cart.reduce((total, item) => {\n      const itemPrice = parseFloat(item.price) || 0;\n      const itemQuantity = parseInt(item.quantity) || 1;\n      return total + (itemPrice * itemQuantity);\n    }, 0);\n  }, [cart]);\n\n  // Obtener cantidad de items\n  const getItemCount = useCallback(() => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  }, [cart]);\n\n  // Obtener un item específico\n  const getCartItem = useCallback((itemId) => {\n    return cart.find(item => item.id === itemId);\n  }, [cart]);\n\n  // Verificar si un producto está en el carrito\n  const isInCart = useCallback((productId) => {\n    return cart.some(item => item.productId === productId);\n  }, [cart]);\n\n  // Obtener descripción de personalizaciones\n  const getCustomizationDescription = (customizations) => {\n    if (!customizations || Object.keys(customizations).length === 0) {\n      return '';\n    }\n    \n    const parts = [];\n    \n    if (customizations.attributes) {\n      Object.entries(customizations.attributes).forEach(([key, value]) => {\n        parts.push(`${key}: ${value}`);\n      });\n    }\n    \n    if (customizations.specialInstructions) {\n      parts.push(`Nota: ${customizations.specialInstructions}`);\n    }\n    \n    return parts.join(' | ');\n  };\n\n  const value = {\n    cart,\n    notification,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getItemCount,\n    getCartItem,\n    isInCart,\n    getCustomizationDescription\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n      {/* Notificación Global */}\n      {notification && (\n        <div className={`cart-notification ${notification.type}`}>\n          {notification.message}\n        </div>\n      )}\n    </CartContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}